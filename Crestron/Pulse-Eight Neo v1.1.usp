/*******************************************************************************************
	SIMPL+ Module Information
	(Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
	Compiler Directives
	(Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
	 (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
	Include Libraries
	(Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
	DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
	(Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
         
// DIGITAL_INPUT         
ANALOG_INPUT _SKIP_, VideoOut1, VideoOut2, VideoOut3, VideoOut4, VideoOut5, VideoOut6, VideoOut7, VideoOut8;
// STRING_INPUT 
// BUFFER_INPUT 


// DIGITAL_OUTPUT
ANALOG_OUTPUT _SKIP_, VideoOut1_Feedback, VideoOut2_Feedback, VideoOut3_Feedback, VideoOut4_Feedback, VideoOut5_Feedback, VideoOut6_Feedback, VideoOut7_Feedback, VideoOut8_Feedback;
// STRING_OUTPUT
// BUFFER_OUTPUT

/*******************************************************************************************
	SOCKETS
	(Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT client[16384];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
	Parameters
	(Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER IP_ADDRESS$[16];

/*******************************************************************************************
	Parameter Properties
	(Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
	 // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
	 // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
	 // propBounds = lower_bound , upper_bound;
	 // propDefaultValue = ;  // or, propDefaultValue = "";
	 // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
	 // propShortDescription = "status_bar_hint_text";
	 // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
	 // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
	Structure Definitions
	(Uncomment and define structure definitions as needed)
	Note:  Be sure to initialize all declared STRING variables as needed
				 For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
	Global Variables
	(Uncomment and declare global variables as needed)
	Note:  Be sure to initialize all declared STRING variables as needed
				 For example, in Function Main: myString = "";
*******************************************************************************************/
//INTEGER CURRENT_INPUT, CURRENT_OUTPUT;

// LONG_INTEGER
SIGNED_INTEGER G_CONNECTIONSTATUS, G_SOCKETSTATUS;
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
	Functions
	(Add any additional functions here)
	Note:  Functions must be physically placed before the location in
				 the code that calls them.
*******************************************************************************************/
Function MatrixControl(integer input, integer output)
{	
	integer count;
    signed_integer res;           
	string target$[64];
	string packetToSend$[200];
		
	count = 0;

	G_CONNECTIONSTATUS = SocketConnectClient(client, IP_ADDRESS$, 80, 0); // 0 = success, < 0 = error;
	print("(MatrixControl): G_CONNECTIONSTATUS = %d", G_CONNECTIONSTATUS);

	// Wait for connection
	while ((G_SOCKETSTATUS <> 2) && (count < 10)) 
	{
		delay(20);
		count = count + 1;
	}

	makestring(target$, "/Port/Set/%d/%d", output-1, input-1);
	print("(MatrixControl): target$ = %s", target$);
	
	makestring(packetToSend$, "GET %s HTTP/1.1\nHost: %s\n\n", target$, IP_ADDRESS$);

	print("(MatrixControl): SENDING.....");
	res = socketsend(client, packetToSend$);

	print("(MatrixControl): res = %d", res);

	// Reset current i/o to defaults
	// CURRENT_INPUT = 0;
	// CURRENT_OUTPUT = 0;	 

	print("(MatrixControl): input = %d, output = %d", input, output);
    
    SWITCH(input)
    {
    	CASE (1):
    	{
    		VideoOut1_Feedback = output;
    	}
      	CASE (2):
    	{
    		VideoOut2_Feedback = output;
    	}
    	CASE (3):
    	{
    		VideoOut3_Feedback = output;
    	}
    	CASE (4):
    	{
    		VideoOut4_Feedback = output;
    	}
    	CASE (5):
    	{
    		VideoOut5_Feedback = output;
    	}
    	CASE (6):
    	{
    		VideoOut6_Feedback = output;
    	}
    	CASE (7):
    	{
    		VideoOut7_Feedback = output;
    	}
    	CASE (8):
    	{
    		VideoOut8_Feedback = output;
    	}
    }
}



/*
Integer_Function MyIntFunction1()
{
		// TODO:  Add local variable declarations here

		// TODO:  Add code here

		Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
		// TODO:  Add local variable declarations here

		// TODO:  Add code here

		Return ("");
}
*/

/*******************************************************************************************
	Event Handlers
	(Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE VideoOut1
{
 	MatrixControl(1, VideoOut1);
}

CHANGE VideoOut2
{
 	MatrixControl(2, VideoOut2);
}

CHANGE VideoOut3
{
 	MatrixControl(3, VideoOut3);
}

CHANGE VideoOut4
{
 	MatrixControl(4, VideoOut4);
}

CHANGE VideoOut5
{
 	MatrixControl(5, VideoOut5);
}

CHANGE VideoOut6
{
 	MatrixControl(6, VideoOut6);
}

CHANGE VideoOut7
{
 	MatrixControl(7, VideoOut7);
}


CHANGE VideoOut8
{
 	MatrixControl(8, VideoOut8);
}


/*
RELEASE input
{
		// TODO:  Add code here
}
*/

/*
CHANGE input
{
		// TODO:  Add code here
}
*/

/*
EVENT
{
		// TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
		// TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
		// TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
		// TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
		// TODO:  Add code here
}
*/

SOCKETCONNECT client 
{
	print("(SocketConnect): input buffer of size: %d\n", Len(client.SocketRxBuf));
}


SOCKETDISCONNECT client 
{
	print("(SocketDisconnect)");
}

SOCKETRECEIVE client 
{
	print("(SocketReceive)");
	ClearBuffer(client.SocketRxBuf);
	G_CONNECTIONSTATUS = SocketDisconnectClient(client);
}

SOCKETSTATUS client 
{
	// Should be 2
	G_SOCKETSTATUS = SocketGetStatus();
	print("(SocketStatus) SocketGetStatus = %d\n", G_SOCKETSTATUS);
}

/*******************************************************************************************
	Main()
	Uncomment and place one-time startup code here
	(This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	print("init");
	// TODO:  Add code here
	// Initialize declared global and local variables/arrays as needed.
	
	// CURRENT_INPUT = 0;
	// CURRENT_OUTPUT = 0;
	
	// WaitForInitializationComplete();
	// If you are reading any Input or Output variables, uncomment
	//   the WaitForInitializationComplete statement above and read
	//   them afterwards.  Input/Output variables will not have
	//   their correct values set until after the logic processor
	//   runs and propagates the values to them.
}
